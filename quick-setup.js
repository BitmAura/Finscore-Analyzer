#!/usr/bin/env node
/**
 * Quick Setup Wizard for FinScore Analyzer
 * Automates the Supabase setup process
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('\n' + '='.repeat(70));
console.log('üöÄ FINSCORE ANALYZER - QUICK SETUP WIZARD');
console.log('='.repeat(70) + '\n');

console.log('This wizard will help you set up Supabase in 5 minutes.\n');

const questions = [
  {
    key: 'NEXT_PUBLIC_SUPABASE_URL',
    question: 'Enter your Supabase URL (e.g., https://xxx.supabase.co): ',
    default: 'https://gnhuwhfxotmfkvongowp.supabase.co',
    validate: (value) => value.includes('supabase.co')
  },
  {
    key: 'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    question: 'Enter your Supabase ANON key (starts with eyJhbGc...): ',
    default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImduaHV3aGZ4b3RtZmt2b25nb3dwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg0NDcyNzYsImV4cCI6MjA3NDAyMzI3Nn0.Ct-M61-9VlFBlDnRXOtSlB7zeiHaDo4_4T40LGM9iLg',
    validate: (value) => value.startsWith('eyJ')
  },
  {
    key: 'SUPABASE_SERVICE_ROLE_KEY',
    question: 'Enter your Supabase SERVICE ROLE key (SECRET - starts with eyJhbGc...): ',
    default: null,
    required: true,
    validate: (value) => value && value.startsWith('eyJ') && value.length > 100
  }
];

let config = {};
let currentQuestion = 0;

function askQuestion() {
  if (currentQuestion >= questions.length) {
    saveConfig();
    return;
  }

  const q = questions[currentQuestion];
  const prompt = q.default 
    ? `${q.question}[${q.default.substring(0, 30)}...] `
    : q.question;

  rl.question(prompt, (answer) => {
    const value = answer.trim() || q.default;

    if (q.required && !value) {
      console.log(`‚ùå This field is required. Please try again.\n`);
      askQuestion();
      return;
    }

    if (q.validate && value && !q.validate(value)) {
      console.log(`‚ùå Invalid value. Please check and try again.\n`);
      askQuestion();
      return;
    }

    config[q.key] = value;
    console.log(`‚úÖ ${q.key} saved\n`);
    
    currentQuestion++;
    askQuestion();
  });
}

function saveConfig() {
  console.log('\n' + '='.repeat(70));
  console.log('üíæ SAVING CONFIGURATION');
  console.log('='.repeat(70) + '\n');

  // Read existing .env.local if it exists
  const envPath = path.join(__dirname, '.env.local');
  let existingEnv = {};
  
  if (fs.existsSync(envPath)) {
    const content = fs.readFileSync(envPath, 'utf8');
    content.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        existingEnv[key.trim()] = valueParts.join('=').trim();
      }
    });
  }

  // Merge with new config
  const finalConfig = { ...existingEnv, ...config };

  // Add other required variables if missing
  if (!finalConfig.NEXTAUTH_URL) {
    finalConfig.NEXTAUTH_URL = 'http://localhost:3000';
  }
  if (!finalConfig.NEXTAUTH_SECRET) {
    const crypto = require('crypto');
    finalConfig.NEXTAUTH_SECRET = crypto.randomBytes(32).toString('base64');
  }

  // Write to .env.local
  let envContent = '# FinScore Analyzer Environment Variables\n';
  envContent += '# Generated by quick-setup.js\n';
  envContent += `# Date: ${new Date().toISOString()}\n\n`;
  
  envContent += '# Supabase Configuration\n';
  envContent += `NEXT_PUBLIC_SUPABASE_URL=${finalConfig.NEXT_PUBLIC_SUPABASE_URL}\n`;
  envContent += `NEXT_PUBLIC_SUPABASE_ANON_KEY=${finalConfig.NEXT_PUBLIC_SUPABASE_ANON_KEY}\n`;
  envContent += `SUPABASE_SERVICE_ROLE_KEY=${finalConfig.SUPABASE_SERVICE_ROLE_KEY}\n\n`;
  
  envContent += '# NextAuth Configuration\n';
  envContent += `NEXTAUTH_URL=${finalConfig.NEXTAUTH_URL}\n`;
  envContent += `NEXTAUTH_SECRET=${finalConfig.NEXTAUTH_SECRET}\n\n`;
  
  // Add other variables if they exist
  const otherKeys = Object.keys(finalConfig).filter(k => 
    !k.includes('SUPABASE') && !k.includes('NEXTAUTH')
  );
  
  if (otherKeys.length > 0) {
    envContent += '# Other Configuration\n';
    otherKeys.forEach(key => {
      envContent += `${key}=${finalConfig[key]}\n`;
    });
  }

  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ Configuration saved to .env.local\n');

  // Show next steps
  console.log('='.repeat(70));
  console.log('‚ú® SETUP COMPLETE!');
  console.log('='.repeat(70) + '\n');

  console.log('Next steps:\n');
  console.log('1Ô∏è‚É£  Test your connection:');
  console.log('   node test-supabase-connection.js\n');

  console.log('2Ô∏è‚É£  Apply database schema:');
  console.log('   Open: https://app.supabase.com/project/_/sql/new');
  console.log('   Copy & paste: sql/FINAL_PRODUCTION_SCHEMA.sql');
  console.log('   Click: RUN\n');

  console.log('3Ô∏è‚É£  Create storage buckets:');
  console.log('   Open: https://app.supabase.com/project/_/storage/buckets');
  console.log('   Create: bank-statements, reports, user-uploads\n');

  console.log('4Ô∏è‚É£  Start development:');
  console.log('   npm run dev\n');

  console.log('üìñ Full guide: PRODUCT_AUDIT_AND_SETUP_GUIDE.md\n');

  rl.close();
}

// Start the wizard
console.log('Let\'s configure your Supabase credentials.\n');
console.log('üìå Find these at: https://app.supabase.com/project/_/settings/api\n');
askQuestion();
