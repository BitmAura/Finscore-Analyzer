'use client'

import { useState } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Progress } from '@/components/ui/progress'
import {
  AlertTriangle,
  ArrowUpRight,
  BarChart3,
  CheckCircle,
  ChevronDown,
  ChevronRight,
  DollarSign,
  FileText,
  Filter,
  Heart,
  MessageSquare,
  Search,
  TrendingUp,
  User,
  Users,
  Zap
} from 'lucide-react'
import { LineChart, BarChart } from '@/components/analytics/Charts'

interface Customer {
  id: string
  name: string
  plan: 'Enterprise' | 'Business' | 'Standard'
  healthScore: number
  mrr: number
  renewalDate: string
  lastActivity: string
  usageChange: number // percentage
  status: 'active' | 'at-risk' | 'churned' | 'new'
}

const customerData: Customer[] = [
  {
    id: 'cust-001',
    name: 'Global Innovations Inc.',
    plan: 'Enterprise',
    healthScore: 92,
    mrr: 2500,
    renewalDate: '2026-08-15',
    lastActivity: '2 hours ago',
    usageChange: 15,
    status: 'active'
  },
  {
    id: 'cust-002',
    name: 'Digital Solutions LLC',
    plan: 'Business',
    healthScore: 45,
    mrr: 500,
    renewalDate: '2025-11-20',
    lastActivity: '5 days ago',
    usageChange: -35,
    status: 'at-risk'
  },
  {
    id: 'cust-003',
    name: 'Quantum Leap Corp',
    plan: 'Enterprise',
    healthScore: 88,
    mrr: 3000,
    renewalDate: '2026-01-10',
    lastActivity: '1 day ago',
    usageChange: 8,
    status: 'active'
  },
  {
    id: 'cust-004',
    name: 'Startup Ventures',
    plan: 'Standard',
    healthScore: 75,
    mrr: 100,
    renewalDate: '2026-03-01',
    lastActivity: '8 hours ago',
    usageChange: 25,
    status: 'new'
  },
  {
    id: 'cust-005',
    name: 'Legacy Systems Co.',
    plan: 'Business',
    healthScore: 25,
    mrr: 450,
    renewalDate: '2025-10-25',
    lastActivity: '12 days ago',
    usageChange: -60,
    status: 'at-risk'
  },
  {
    id: 'cust-006',
    name: 'Momentum Growth',
    plan: 'Business',
    healthScore: 95,
    mrr: 600,
    renewalDate: '2026-05-22',
    lastActivity: '30 minutes ago',
    usageChange: 18,
    status: 'active'
  },
  {
    id: 'cust-007',
    name: 'Churned Co.',
    plan: 'Standard',
    healthScore: 10,
    mrr: 0,
    renewalDate: '2025-09-01',
    lastActivity: '1 month ago',
    usageChange: -100,
    status: 'churned'
  }
]

export default function CustomerSuccessDashboard() {
  const [activeTab, setActiveTab] = useState('all')
  const [searchQuery, setSearchQuery] = useState('')

  const filteredCustomers = customerData.filter(customer => {
    const matchesSearch = customer.name.toLowerCase().includes(searchQuery.toLowerCase())

    if (activeTab === 'all') return matchesSearch
    if (activeTab === 'at-risk') return customer.status === 'at-risk' && matchesSearch
    if (activeTab === 'new') return customer.status === 'new' && matchesSearch
    if (activeTab === 'churned') return customer.status === 'churned' && matchesSearch

    return matchesSearch
  })

  const getHealthColor = (score: number) => {
    if (score > 80) return 'text-green-600'
    if (score > 50) return 'text-amber-600'
    return 'text-red-600'
  }

  const getHealthBgColor = (score: number) => {
    if (score > 80) return 'bg-green-100'
    if (score > 50) return 'bg-amber-100'
    return 'bg-red-100'
  }

  const getPlanColor = (plan: string) => {
    switch (plan) {
      case 'Enterprise':
        return 'bg-purple-100 text-purple-800'
      case 'Business':
        return 'bg-blue-100 text-blue-800'
      case 'Standard':
        return 'bg-green-100 text-green-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const summaryData = {
    totalCustomers: customerData.filter(c => c.status !== 'churned').length,
    totalMrr: customerData.filter(c => c.status !== 'churned').reduce((acc, c) => acc + c.mrr, 0),
    avgHealthScore: Math.round(customerData.filter(c => c.status !== 'churned').reduce((acc, c) => acc + c.healthScore, 0) / customerData.filter(c => c.status !== 'churned').length),
    atRiskCustomers: customerData.filter(c => c.status === 'at-risk').length
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <header className="mb-8">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Customer Success Dashboard
            </h1>
            <p className="text-gray-500 mt-1">
              Monitor customer health and drive retention
            </p>
          </div>
          <div className="flex items-center gap-3 mt-4 md:mt-0">
            <Button variant="outline" className="flex items-center gap-2">
              <MessageSquare className="h-4 w-4" />
              <span>Send Broadcast</span>
            </Button>
            <Button className="flex items-center gap-2">
              <Zap className="h-4 w-4" />
              <span>Create Playbook</span>
            </Button>
          </div>
        </div>
      </header>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <Card className="p-6">
          <div className="flex justify-between items-start mb-4">
            <div className="flex items-center gap-2">
              <Users className="h-5 w-5 text-blue-600" />
              <h3 className="text-sm font-medium text-gray-500">Total Customers</h3>
            </div>
          </div>
          <div className="flex items-end justify-between">
            <h2 className="text-3xl font-bold text-gray-900">{summaryData.totalCustomers}</h2>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex justify-between items-start mb-4">
            <div className="flex items-center gap-2">
              <DollarSign className="h-5 w-5 text-green-600" />
              <h3 className="text-sm font-medium text-gray-500">Total MRR</h3>
            </div>
          </div>
          <div className="flex items-end justify-between">
            <h2 className="text-3xl font-bold text-gray-900">${summaryData.totalMrr.toLocaleString()}</h2>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex justify-between items-start mb-4">
            <div className="flex items-center gap-2">
              <Heart className="h-5 w-5 text-red-600" />
              <h3 className="text-sm font-medium text-gray-500">Avg. Health Score</h3>
            </div>
          </div>
          <div className="flex items-end justify-between">
            <h2 className={`text-3xl font-bold ${getHealthColor(summaryData.avgHealthScore)}`}>
              {summaryData.avgHealthScore}
            </h2>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex justify-between items-start mb-4">
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-amber-600" />
              <h3 className="text-sm font-medium text-gray-500">At-Risk Customers</h3>
            </div>
          </div>
          <div className="flex items-end justify-between">
            <h2 className="text-3xl font-bold text-gray-900">{summaryData.atRiskCustomers}</h2>
          </div>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <Card className="lg:col-span-2 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-6">Customer Health Distribution</h3>
          <div className="h-80">
            <BarChart
              data={{
                labels: ['0-20', '21-40', '41-60', '61-80', '81-100'],
                datasets: [
                  {
                    label: 'Number of Customers',
                    data: [
                      customerData.filter(c => c.healthScore <= 20).length,
                      customerData.filter(c => c.healthScore > 20 && c.healthScore <= 40).length,
                      customerData.filter(c => c.healthScore > 40 && c.healthScore <= 60).length,
                      customerData.filter(c => c.healthScore > 60 && c.healthScore <= 80).length,
                      customerData.filter(c => c.healthScore > 80).length,
                    ],
                    backgroundColor: [
                      'rgba(239, 68, 68, 0.7)',
                      'rgba(245, 158, 11, 0.7)',
                      'rgba(234, 179, 8, 0.7)',
                      'rgba(132, 204, 22, 0.7)',
                      'rgba(34, 197, 94, 0.7)',
                    ]
                  }
                ]
              }}
              height={320}
            />
          </div>
        </Card>

        <Card className="p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-6">Upcoming Renewals</h3>
          <div className="space-y-4">
            {customerData
              .filter(c => c.status !== 'churned')
              .sort((a, b) => new Date(a.renewalDate).getTime() - new Date(b.renewalDate).getTime())
              .slice(0, 5)
              .map(customer => (
                <div key={customer.id} className="flex items-center justify-between p-3 border border-gray-100 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-gray-100 rounded-full">
                      <User className="h-5 w-5 text-gray-600" />
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{customer.name}</p>
                      <p className="text-xs text-gray-500">
                        Renews on {new Date(customer.renewalDate).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  <span className={`text-xs px-2 py-1 rounded-full ${getPlanColor(customer.plan)}`}>
                    {customer.plan}
                  </span>
                </div>
              ))}
          </div>
        </Card>
      </div>

      <Card>
        <div className="p-6 border-b border-gray-200">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div className="relative w-full md:w-96">
              <Input
                type="text"
                placeholder="Search customers..."
                className="pr-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              <Search className="absolute right-3 top-2.5 h-5 w-5 text-gray-400" />
            </div>

            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid grid-cols-4">
                <TabsTrigger value="all">All</TabsTrigger>
                <TabsTrigger value="at-risk">At-Risk</TabsTrigger>
                <TabsTrigger value="new">New</TabsTrigger>
                <TabsTrigger value="churned">Churned</TabsTrigger>
              </TabsList>
            </Tabs>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead>
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Customer
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Health Score
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  MRR
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Usage Change (30d)
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Last Activity
                </th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredCustomers.map(customer => (
                <tr key={customer.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10">
                        <div className={`h-10 w-10 rounded-full flex items-center justify-center ${getHealthBgColor(customer.healthScore)}`}>
                          <User className={`h-5 w-5 ${getHealthColor(customer.healthScore)}`} />
                        </div>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">{customer.name}</div>
                        <div className={`text-xs px-2 py-0.5 rounded-full inline-block mt-1 ${getPlanColor(customer.plan)}`}>
                          {customer.plan}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <span className={`text-sm font-bold ${getHealthColor(customer.healthScore)}`}>
                        {customer.healthScore}
                      </span>
                      <Progress value={customer.healthScore} className="w-24 ml-3 h-2" />
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    ${customer.mrr.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`flex items-center text-sm ${customer.usageChange > 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {customer.usageChange > 0 ? (
                        <TrendingUp className="h-4 w-4 mr-1" />
                      ) : (
                        <TrendingUp className="h-4 w-4 mr-1 transform rotate-90" />
                      )}
                      <span>{customer.usageChange}%</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {customer.lastActivity}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <Button variant="ghost" size="sm" className="text-blue-600">
                      View Details
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>
    </div>
  )
}
