'use client'

import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { 
  FileText, 
  Download, 
  Eye, 
  AlertTriangle, 
  CheckCircle, 
  TrendingUp, 
  TrendingDown,
  Calendar,
  DollarSign,
  CreditCard,
  Banknote,
  Building,
  User,
  Shield,
  BarChart3,
  PieChart,
  Activity
} from 'lucide-react'

interface ReportData {
  accountInfo: {
    accountNumber: string
    bankName: string
    accountType: string
    holderName: string
    analysisStartDate: string
    analysisEndDate: string
    totalDays: number
  }
  summary: {
    totalCredits: number
    totalDebits: number
    netBalance: number
    averageBalance: number
    minimumBalance: number
    maximumBalance: number
    totalTransactions: number
  }
  uploadedFiles: Array<{
    fileName: string
    bankName: string
    accountNo: string
    accountType: string
    processed: boolean
    authenticated: boolean
    fileType: string
    startDate: string
    endDate: string
    status: string
  }>
  transactions: Array<{
    date: string
    description: string
    debitAmount: number
    creditAmount: number
    balance: number
    category: string
  }>
  chequeReturns: Array<{
    date: string
    chequeNumber: string
    amount: number
    reason: string
    beneficiary: string
  }>
  atmWithdrawals: Array<{
    date: string
    location: string
    amount: number
    balance: number
  }>
  recurringCredits: Array<{
    description: string
    amount: number
    frequency: string
    lastDate: string
    count: number
  }>
  recurringDebits: Array<{
    description: string
    amount: number
    frequency: string
    lastDate: string
    count: number
  }>
  cashflowAnalysis: {
    monthlyData: Array<{
      month: string
      credits: number
      debits: number
      netFlow: number
    }>
    trends: {
      creditTrend: string
      debitTrend: string
      balanceTrend: string
    }
  }
  riskAssessment: {
    riskScore: number
    riskLevel: string
    factors: Array<{
      factor: string
      impact: string
      severity: string
    }>
  }
}

interface ComprehensiveReportProps {
  data: ReportData
}

export default function ComprehensiveReport({ data }: ComprehensiveReportProps) {
  const [activeTab, setActiveTab] = useState('overview')

  const tabs = [
    { id: 'overview', label: 'Overview', icon: <Eye className="w-4 h-4" /> },
    { id: 'summary', label: 'Summary', icon: <BarChart3 className="w-4 h-4" /> },
    { id: 'cashflow', label: 'Cashflow Summary', icon: <TrendingUp className="w-4 h-4" /> },
    { id: 'cheque-returns', label: 'Cheque Returns', icon: <AlertTriangle className="w-4 h-4" /> },
    { id: 'atm-txns', label: 'ATM Transactions', icon: <CreditCard className="w-4 h-4" /> },
    { id: 'recurring-credits', label: 'Recurring Credits', icon: <TrendingUp className="w-4 h-4" /> },
    { id: 'recurring-debits', label: 'Recurring Debits', icon: <TrendingDown className="w-4 h-4" /> },
    { id: 'loans', label: 'Loans', icon: <Building className="w-4 h-4" /> },
    { id: 'emi-analysis', label: 'EMI Analysis', icon: <Calendar className="w-4 h-4" /> },
    { id: 'party-wise', label: 'Party-wise Txns', icon: <User className="w-4 h-4" /> },
    { id: 'custom-keywords', label: 'Custom Keywords', icon: <FileText className="w-4 h-4" /> },
    { id: 'counterparty', label: 'Counterparty', icon: <Building className="w-4 h-4" /> },
    { id: 'gst-analysis', label: 'GST Analysis', icon: <Shield className="w-4 h-4" /> },
    { id: 'risk-assessment', label: 'Risk Assessment', icon: <AlertTriangle className="w-4 h-4" /> },
    { id: 'fraud-detection', label: 'Fraud Detection', icon: <Shield className="w-4 h-4" /> }
  ]

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return <OverviewTab data={data} />
      case 'summary':
        return <SummaryTab data={data} />
      case 'cashflow':
        return <CashflowTab data={data} />
      case 'cheque-returns':
        return <ChequeReturnsTab data={data} />
      case 'atm-txns':
        return <ATMTransactionsTab data={data} />
      case 'recurring-credits':
        return <RecurringCreditsTab data={data} />
      case 'recurring-debits':
        return <RecurringDebitsTab data={data} />
      case 'gst-analysis':
        return <GSTAnalysisTab data={data} />
      case 'risk-assessment':
        return <RiskAssessmentTab data={data} />
      default:
        return <OverviewTab data={data} />
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Report Header */}
      <div className="report-header">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold">Report Generated By FinScore Analyzer</h1>
            <p className="text-sm opacity-90">
              Accuracy: 100% - All transactions verified against balance
            </p>
          </div>
          <div className="flex gap-3">
            <button className="bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg transition-colors flex items-center gap-2">
              <Download className="w-4 h-4" /> Export PDF
            </button>
            <button className="bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg transition-colors flex items-center gap-2">
              <Download className="w-4 h-4" /> Export Excel
            </button>
          </div>
        </div>
      </div>

      {/* Account Summary */}
      <div className="bg-yellow-50 border-l-4 border-yellow-400 p-6 mx-6 mt-6 rounded-r-lg">
        <h2 className="font-semibold text-gray-800 mb-4">Account Information</h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
          <div>
            <span className="font-medium text-gray-600">Account Number:</span>
            <p className="font-mono">{data.accountInfo.accountNumber}</p>
          </div>
          <div>
            <span className="font-medium text-gray-600">Bank Name:</span>
            <p>{data.accountInfo.bankName}</p>
          </div>
          <div>
            <span className="font-medium text-gray-600">Account Type:</span>
            <p>{data.accountInfo.accountType}</p>
          </div>
          <div>
            <span className="font-medium text-gray-600">Analysis Period:</span>
            <p>{data.accountInfo.totalDays} days ({data.accountInfo.analysisStartDate} to {data.accountInfo.analysisEndDate})</p>
          </div>
        </div>
      </div>

      {/* Files Processing Status */}
      <div className="mx-6 mt-6">
        <div className="bg-teal-50 border-l-4 border-teal-400 p-4 rounded-r-lg">
          <h3 className="font-semibold text-gray-800 mb-3">Uploaded Files & Results</h3>
          <div className="overflow-x-auto">
            <table className="report-table">
              <thead>
                <tr>
                  <th>File Name</th>
                  <th>Bank Name</th>
                  <th>Account No.</th>
                  <th>Account Type</th>
                  <th>File Processed</th>
                  <th>File Authenticity</th>
                  <th>File Type</th>
                  <th>Txn Start Date</th>
                  <th>Txn End Date</th>
                  <th>Notes</th>
                </tr>
              </thead>
              <tbody>
                {data.uploadedFiles.map((file, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="font-mono text-xs">{file.fileName}</td>
                    <td>{file.bankName}</td>
                    <td className="font-mono">{file.accountNo}</td>
                    <td>{file.accountType}</td>
                    <td>
                      {file.processed ? (
                        <span className="highlight-positive flex items-center gap-1">
                          <CheckCircle className="w-4 h-4" /> Yes
                        </span>
                      ) : (
                        <span className="highlight-negative">No</span>
                      )}
                    </td>
                    <td>
                      <span className="text-gray-500">-</span>
                    </td>
                    <td>{file.fileType}</td>
                    <td>{file.startDate}</td>
                    <td>{file.endDate}</td>
                    <td>
                      <span className={`px-2 py-1 rounded text-xs ${
                        file.status === 'Verified' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {file.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="mx-6 mt-6">
        <div className="bg-white rounded-lg shadow-sm overflow-hidden">
          <div className="border-b border-gray-200 overflow-x-auto">
            <nav className="flex space-x-0 min-w-max">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600 bg-blue-50'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  {tab.icon}
                  {tab.label}
                </button>
              ))}
            </nav>
          </div>

          {/* Tab Content */}
          <div className="p-6">
            <motion.div
              key={activeTab}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              {renderTabContent()}
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Tab Components
function OverviewTab({ data }: { data: ReportData }) {
  return (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800">Account Overview</h3>
      
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Credits</p>
              <p className="text-2xl font-bold text-blue-600">
                ₹{data.summary.totalCredits.toLocaleString()}
              </p>
            </div>
            <TrendingUp className="w-8 h-8 text-blue-500" />
          </div>
        </div>

        <div className="bg-red-50 p-4 rounded-lg border-l-4 border-red-400">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Debits</p>
              <p className="text-2xl font-bold text-red-600">
                ₹{data.summary.totalDebits.toLocaleString()}
              </p>
            </div>
            <TrendingDown className="w-8 h-8 text-red-500" />
          </div>
        </div>

        <div className="bg-green-50 p-4 rounded-lg border-l-4 border-green-400">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Net Balance</p>
              <p className="text-2xl font-bold text-green-600">
                ₹{data.summary.netBalance.toLocaleString()}
              </p>
            </div>
            <DollarSign className="w-8 h-8 text-green-500" />
          </div>
        </div>

        <div className="bg-purple-50 p-4 rounded-lg border-l-4 border-purple-400">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Transactions</p>
              <p className="text-2xl font-bold text-purple-600">
                {data.summary.totalTransactions.toLocaleString()}
              </p>
            </div>
            <Activity className="w-8 h-8 text-purple-500" />
          </div>
        </div>
      </div>

      <div className="grid md:grid-cols-3 gap-6">
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-600 mb-1">Average Balance</p>
          <p className="text-xl font-bold text-gray-800">₹{data.summary.averageBalance.toLocaleString()}</p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-600 mb-1">Minimum Balance</p>
          <p className="text-xl font-bold text-gray-800">₹{data.summary.minimumBalance.toLocaleString()}</p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-600 mb-1">Maximum Balance</p>
          <p className="text-xl font-bold text-gray-800">₹{data.summary.maximumBalance.toLocaleString()}</p>
        </div>
      </div>
    </div>
  )
}

function SummaryTab({ data }: { data: ReportData }) {
  return (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800">Transaction Summary</h3>
      
      <div className="overflow-x-auto">
        <table className="report-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>Description</th>
              <th>Debit Amount</th>
              <th>Credit Amount</th>
              <th>Balance</th>
              <th>Category</th>
            </tr>
          </thead>
          <tbody>
            {data.transactions.slice(0, 50).map((txn, index) => (
              <tr key={index} className="hover:bg-gray-50">
                <td>{txn.date}</td>
                <td className="max-w-xs truncate">{txn.description}</td>
                <td className={txn.debitAmount > 0 ? 'highlight-negative' : 'text-gray-500'}>
                  {txn.debitAmount > 0 ? `₹${txn.debitAmount.toLocaleString()}` : '-'}
                </td>
                <td className={txn.creditAmount > 0 ? 'highlight-positive' : 'text-gray-500'}>
                  {txn.creditAmount > 0 ? `₹${txn.creditAmount.toLocaleString()}` : '-'}
                </td>
                <td className="font-mono">₹{txn.balance.toLocaleString()}</td>
                <td>
                  <span className="bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs">
                    {txn.category}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {data.transactions.length > 50 && (
        <p className="text-center text-gray-500 text-sm">
          Showing first 50 transactions out of {data.transactions.length} total transactions
        </p>
      )}
    </div>
  )
}

function CashflowTab({ data }: { data: ReportData }) {
  return (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800">Cashflow Analysis</h3>
      
      <div className="grid md:grid-cols-3 gap-6 mb-8">
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <p className="text-sm text-gray-600 mb-2">Credit Trend</p>
          <p className={`text-lg font-bold ${
            data.cashflowAnalysis.trends.creditTrend === 'Increasing' ? 'text-green-600' : 'text-red-600'
          }`}>
            {data.cashflowAnalysis.trends.creditTrend}
          </p>
        </div>
        <div className="bg-red-50 p-4 rounded-lg text-center">
          <p className="text-sm text-gray-600 mb-2">Debit Trend</p>
          <p className={`text-lg font-bold ${
            data.cashflowAnalysis.trends.debitTrend === 'Decreasing' ? 'text-green-600' : 'text-red-600'
          }`}>
            {data.cashflowAnalysis.trends.debitTrend}
          </p>
        </div>
        <div className="bg-green-50 p-4 rounded-lg text-center">
          <p className="text-sm text-gray-600 mb-2">Balance Trend</p>
          <p className={`text-lg font-bold ${
            data.cashflowAnalysis.trends.balanceTrend === 'Stable' ? 'text-green-600' : 'text-yellow-600'
          }`}>
            {data.cashflowAnalysis.trends.balanceTrend}
          </p>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="report-table">
          <thead>
            <tr>
              <th>Month</th>
              <th>Total Credits</th>
              <th>Total Debits</th>
              <th>Net Cash Flow</th>
              <th>Flow Status</th>
            </tr>
          </thead>
          <tbody>
            {data.cashflowAnalysis.monthlyData.map((month, index) => (
              <tr key={index} className="hover:bg-gray-50">
                <td className="font-semibold">{month.month}</td>
                <td className="highlight-positive">₹{month.credits.toLocaleString()}</td>
                <td className="highlight-negative">₹{month.debits.toLocaleString()}</td>
                <td className={month.netFlow >= 0 ? 'highlight-positive' : 'highlight-negative'}>
                  ₹{month.netFlow.toLocaleString()}
                </td>
                <td>
                  <span className={`px-2 py-1 rounded text-xs ${
                    month.netFlow >= 0 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {month.netFlow >= 0 ? 'Positive' : 'Negative'}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

function ChequeReturnsTab({ data }: { data: ReportData }) {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-xl font-semibold text-gray-800">Cheque Returns & Bounces</h3>
        <div className="flex items-center gap-2">
          <AlertTriangle className="w-5 h-5 text-red-500" />
          <span className="text-red-600 font-semibold">
            {data.chequeReturns.length} Total Returns
          </span>
        </div>
      </div>

      {data.chequeReturns.length === 0 ? (
        <div className="bg-green-50 border border-green-200 rounded-lg p-8 text-center">
          <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
          <h4 className="text-lg font-semibold text-green-800 mb-2">No Cheque Returns Found</h4>
          <p className="text-green-600">This account has a clean record with no cheque bounces or returns.</p>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="report-table">
            <thead>
              <tr>
                <th>Date</th>
                <th>Cheque Number</th>
                <th>Amount</th>
                <th>Beneficiary</th>
                <th>Return Reason</th>
                <th>Severity</th>
              </tr>
            </thead>
            <tbody>
              {data.chequeReturns.map((cheque, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td>{cheque.date}</td>
                  <td className="font-mono">{cheque.chequeNumber}</td>
                  <td className="highlight-negative font-semibold">
                    ₹{cheque.amount.toLocaleString()}
                  </td>
                  <td>{cheque.beneficiary}</td>
                  <td>{cheque.reason}</td>
                  <td>
                    <span className="bg-red-100 text-red-800 px-2 py-1 rounded text-xs">
                      High Risk
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  )
}

function ATMTransactionsTab({ data }: { data: ReportData }) {
  const totalATMAmount = data.atmWithdrawals.reduce((sum, atm) => sum + atm.amount, 0)
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-xl font-semibold text-gray-800">ATM Withdrawals</h3>
        <div className="flex items-center gap-4">
          <div className="text-center">
            <p className="text-sm text-gray-600">Total Withdrawals</p>
            <p className="text-lg font-bold text-blue-600">{data.atmWithdrawals.length}</p>
          </div>
          <div className="text-center">
            <p className="text-sm text-gray-600">Total Amount</p>
            <p className="text-lg font-bold text-red-600">₹{totalATMAmount.toLocaleString()}</p>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="report-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>ATM Location</th>
              <th>Withdrawal Amount</th>
              <th>Balance After</th>
              <th>Time Pattern</th>
            </tr>
          </thead>
          <tbody>
            {data.atmWithdrawals.map((atm, index) => (
              <tr key={index} className="hover:bg-gray-50">
                <td>{atm.date}</td>
                <td>{atm.location}</td>
                <td className="highlight-negative font-semibold">
                  ₹{atm.amount.toLocaleString()}
                </td>
                <td className="font-mono">₹{atm.balance.toLocaleString()}</td>
                <td>
                  <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                    Normal
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

function RecurringCreditsTab({ data }: { data: ReportData }) {
  return (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800">Recurring Credits</h3>
      
      <div className="overflow-x-auto">
        <table className="report-table">
          <thead>
            <tr>
              <th>Description</th>
              <th>Amount</th>
              <th>Frequency</th>
              <th>Last Credit Date</th>
              <th>Total Occurrences</th>
              <th>Reliability</th>
            </tr>
          </thead>
          <tbody>
            {data.recurringCredits.map((credit, index) => (
              <tr key={index} className="hover:bg-gray-50">
                <td className="max-w-xs truncate">{credit.description}</td>
                <td className="highlight-positive font-semibold">
                  ₹{credit.amount.toLocaleString()}
                </td>
                <td>
                  <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs">
                    {credit.frequency}
                  </span>
                </td>
                <td>{credit.lastDate}</td>
                <td className="text-center font-semibold">{credit.count}</td>
                <td>
                  <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs">
                    High
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

function RecurringDebitsTab({ data }: { data: ReportData }) {
  return (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800">Recurring Debits</h3>
      
      <div className="overflow-x-auto">
        <table className="report-table">
          <thead>
            <tr>
              <th>Description</th>
              <th>Amount</th>
              <th>Frequency</th>
              <th>Last Debit Date</th>
              <th>Total Occurrences</th>
              <th>Category</th>
            </tr>
          </thead>
          <tbody>
            {data.recurringDebits.map((debit, index) => (
              <tr key={index} className="hover:bg-gray-50">
                <td className="max-w-xs truncate">{debit.description}</td>
                <td className="highlight-negative font-semibold">
                  ₹{debit.amount.toLocaleString()}
                </td>
                <td>
                  <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                    {debit.frequency}
                  </span>
                </td>
                <td>{debit.lastDate}</td>
                <td className="text-center font-semibold">{debit.count}</td>
                <td>
                  <span className="bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs">
                    Regular
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

function RiskAssessmentTab({ data }: { data: ReportData }) {
  const getRiskColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'low': return 'text-green-600 bg-green-100'
      case 'medium': return 'text-yellow-600 bg-yellow-100'
      case 'high': return 'text-red-600 bg-red-100'
      default: return 'text-gray-600 bg-gray-100'
    }
  }

  return (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800">Risk Assessment</h3>
      
      <div className="grid md:grid-cols-3 gap-6">
        <div className="bg-white p-6 rounded-lg border border-gray-200 text-center">
          <div className="mb-4">
            <div className={`w-24 h-24 mx-auto rounded-full flex items-center justify-center text-2xl font-bold ${getRiskColor(data.riskAssessment.riskLevel)}`}>
              {data.riskAssessment.riskScore}
            </div>
          </div>
          <h4 className="font-semibold text-gray-800">Risk Score</h4>
          <p className="text-sm text-gray-600">Out of 100</p>
        </div>
        
        <div className="bg-white p-6 rounded-lg border border-gray-200 text-center">
          <div className="mb-4">
            <Shield className={`w-16 h-16 mx-auto ${
              data.riskAssessment.riskLevel === 'Low' ? 'text-green-500' :
              data.riskAssessment.riskLevel === 'Medium' ? 'text-yellow-500' : 'text-red-500'
            }`} />
          </div>
          <h4 className="font-semibold text-gray-800">Risk Level</h4>
          <p className={`font-semibold ${
            data.riskAssessment.riskLevel === 'Low' ? 'text-green-600' :
            data.riskAssessment.riskLevel === 'Medium' ? 'text-yellow-600' : 'text-red-600'
          }`}>
            {data.riskAssessment.riskLevel}
          </p>
        </div>
        
        <div className="bg-white p-6 rounded-lg border border-gray-200 text-center">
          <div className="mb-4">
            <AlertTriangle className="w-16 h-16 mx-auto text-orange-500" />
          </div>
          <h4 className="font-semibold text-gray-800">Risk Factors</h4>
          <p className="text-2xl font-bold text-orange-600">{data.riskAssessment.factors.length}</p>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="report-table">
          <thead>
            <tr>
              <th>Risk Factor</th>
              <th>Impact Level</th>
              <th>Severity</th>
              <th>Recommendation</th>
            </tr>
          </thead>
          <tbody>
            {data.riskAssessment.factors.map((factor, index) => (
              <tr key={index} className="hover:bg-gray-50">
                <td>{factor.factor}</td>
                <td>
                  <span className={`px-2 py-1 rounded text-xs ${
                    factor.impact === 'High' ? 'bg-red-100 text-red-800' :
                    factor.impact === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {factor.impact}
                  </span>
                </td>
                <td>
                  <span className={`px-2 py-1 rounded text-xs ${
                    factor.severity === 'Critical' ? 'bg-red-100 text-red-800' :
                    factor.severity === 'Moderate' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-blue-100 text-blue-800'
                  }`}>
                    {factor.severity}
                  </span>
                </td>
                <td className="text-sm text-gray-600">Monitor closely and take preventive measures</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

function GSTAnalysisTab({ data }: { data: ReportData }) {
  // Heuristics: mark GST-related by description containing 'GST'
  const isGST = (desc: string) => /\bgst\b|goods and services tax/i.test(desc)
  const gstTxns = data.transactions.filter(t => isGST(t.description))
  const gstPayments = gstTxns.filter(t => t.debitAmount > 0)
  const gstRefunds = gstTxns.filter(t => t.creditAmount > 0)

  const totalPayments = gstPayments.reduce((sum, t) => sum + t.debitAmount, 0)
  const totalRefunds = gstRefunds.reduce((sum, t) => sum + t.creditAmount, 0)

  // Build a naive month key from date string (supports common dd-mm-yyyy or yyyy-mm-dd)
  const monthKey = (d: string) => {
    // Try to parse both formats
    const m = d.match(/(\d{2})[-/](\d{2})[-/](\d{4})/) || d.match(/(\d{4})[-/](\d{2})[-/](\d{2})/)
    if (m) {
      const [y, mo] = m[1].length === 4 ? [m[1], m[2]] : [m[3], m[2]]
      return `${y}-${mo}`
    }
    return d
  }

  const paymentsByMonth = gstPayments.reduce<Record<string, number>>((acc, t) => {
    const k = monthKey(t.date)
    acc[k] = (acc[k] || 0) + 1
    return acc
  }, {})
  const monthsWithPayments = Object.keys(paymentsByMonth).length

  // Simple compliance heuristic
  // If >= 3 months have payments in a quarter-like cluster, call it Good; else Needs Attention.
  const compliance = monthsWithPayments >= 3 ? 'Good' : (monthsWithPayments >= 1 ? 'Fair' : 'Needs Attention')

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-xl font-semibold text-gray-800">GST Analysis</h3>
        <div className="flex items-center gap-6">
          <div className="text-center">
            <p className="text-sm text-gray-600">GST Payments</p>
            <p className="text-lg font-bold text-red-600">₹{totalPayments.toLocaleString()}</p>
          </div>
          <div className="text-center">
            <p className="text-sm text-gray-600">GST Refunds</p>
            <p className="text-lg font-bold text-green-600">₹{totalRefunds.toLocaleString()}</p>
          </div>
          <div className="text-center">
            <p className="text-sm text-gray-600">Compliance</p>
            <span className={`px-2 py-1 rounded text-xs ${
              compliance === 'Good' ? 'bg-green-100 text-green-800' :
              compliance === 'Fair' ? 'bg-yellow-100 text-yellow-800' :
              'bg-red-100 text-red-800'
            }`}>
              {compliance}
            </span>
          </div>
        </div>
      </div>

      <div className="grid md:grid-cols-3 gap-6">
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-600 mb-1">Payment Months</p>
          <p className="text-xl font-bold text-gray-800">{monthsWithPayments}</p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-600 mb-1">Payment Count</p>
          <p className="text-xl font-bold text-gray-800">{gstPayments.length}</p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-600 mb-1">Refund Count</p>
          <p className="text-xl font-bold text-gray-800">{gstRefunds.length}</p>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="report-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>Description</th>
              <th>Payment</th>
              <th>Refund</th>
              <th>Balance</th>
              <th>Month</th>
            </tr>
          </thead>
          <tbody>
            {gstTxns.map((txn, idx) => (
              <tr key={idx} className="hover:bg-gray-50">
                <td>{txn.date}</td>
                <td className="max-w-xs truncate">{txn.description}</td>
                <td className={txn.debitAmount > 0 ? 'highlight-negative' : 'text-gray-500'}>
                  {txn.debitAmount > 0 ? `₹${txn.debitAmount.toLocaleString()}` : '-'}
                </td>
                <td className={txn.creditAmount > 0 ? 'highlight-positive' : 'text-gray-500'}>
                  {txn.creditAmount > 0 ? `₹${txn.creditAmount.toLocaleString()}` : '-'}
                </td>
                <td className="font-mono">₹{txn.balance.toLocaleString()}</td>
                <td>{monthKey(txn.date)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {gstTxns.length === 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 text-center text-blue-700">
          No GST-tagged transactions detected. Ensure your descriptions include terms like "GST" for automatic detection.
        </div>
      )}
    </div>
  )
}